'use strict';

var window = require('./__polyfills__/window.js');

exports.StorageKeys = void 0;
(function (StorageKeys) {
    StorageKeys["AuthBundle"] = "@turnkey/auth_bundle";
    StorageKeys["CurrentUser"] = "@turnkey/current_user";
    StorageKeys["UserSession"] = "@turnkey/session/v1";
    StorageKeys["ReadWriteSession"] = "@turnkey/read_write_session";
})(exports.StorageKeys || (exports.StorageKeys = {}));
var StorageLocation;
(function (StorageLocation) {
    StorageLocation["Local"] = "local";
    StorageLocation["Secure"] = "secure";
    StorageLocation["Session"] = "session";
})(StorageLocation || (StorageLocation = {}));
const STORAGE_VALUE_LOCATIONS = {
    [exports.StorageKeys.AuthBundle]: StorageLocation.Secure,
    [exports.StorageKeys.CurrentUser]: StorageLocation.Local,
    [exports.StorageKeys.ReadWriteSession]: StorageLocation.Secure,
    [exports.StorageKeys.UserSession]: StorageLocation.Session,
};
const STORAGE_LOCATIONS = {
    [StorageLocation.Local]: window.localStorage,
    [StorageLocation.Secure]: window.localStorage,
    [StorageLocation.Session]: window.localStorage,
};
const getStorageValue = async (storageKey) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    const storageItem = browserStorageLocation.getItem(storageKey);
    return storageItem ? JSON.parse(storageItem) : undefined;
};
const setStorageValue = async (storageKey, storageValue) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    browserStorageLocation.setItem(storageKey, JSON.stringify(storageValue));
};
const removeStorageValue = async (storageKey) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    browserStorageLocation.removeItem(storageKey);
};
/**
 * Saves a user session to storage.
 *
 * @param {TSessionResponse} sessionResponse - The session response containing session details.
 * @param {AuthClient} authClient - The authentication client used for the session.
 * @throws Will throw an error if the authentication client is not set.
 * @returns {Promise<void>} A promise that resolves when the session is saved.
 */
const saveSession = async ({ organizationId, organizationName, sessionExpiry, credentialBundle, userId, username, ...sessionResponse }, authClient) => {
    if (!authClient) {
        throw new Error("Failed to save session: Authentication client not set");
    }
    const expiry = Number(sessionExpiry);
    const session = credentialBundle
        ? {
            write: {
                credentialBundle,
                expiry,
            },
        }
        : {
            read: {
                token: sessionResponse.session,
                expiry,
            },
        };
    const userSession = {
        userId,
        username,
        organization: {
            organizationId,
            organizationName,
        },
        session: {
            authClient,
            ...session,
        },
    };
    await setStorageValue(exports.StorageKeys.UserSession, userSession);
};

exports.getStorageValue = getStorageValue;
exports.removeStorageValue = removeStorageValue;
exports.saveSession = saveSession;
exports.setStorageValue = setStorageValue;
//# sourceMappingURL=storage.js.map
